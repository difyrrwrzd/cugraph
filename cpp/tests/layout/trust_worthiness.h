#include "knn.h"

double euclidian_dist(const std::vector<int>& x,
        const std::vector<int>& y) {
    double total = 0;
    auto i = x.begin();
    auto j = y.begin();
    for (; i != x.end() && j != y.end() ; ++i, ++j)
        total += pow(*i, 2) - 2 * *i * *j + pow(*j, 2);
    return sqrt(total);
}

std::vector<std::vector<double>> pairwise_distances(const std::vector<std::vector<int>>& X) {

    std::vector<std::vector<double>> distance_matrix(X.size(), std::vector<double>(X[0].size()));
#pragma omp parallel for
    for (size_t i = 0; i < X.size(); ++i) {
        for (size_t j = 0; j < i; ++j) {
            const float val = euclidian_dist(X[i], X[j]);
            distance_matrix[i][j] = val;
            distance_matrix[j][i] = val;
        }
    }
    return distance_matrix;
}

template <typename Iter, typename Compare>
std::vector<int> argsort(Iter begin, Iter end, Compare comp)
{
	std::vector<std::pair<int, Iter> > pairList;
	std::vector<int> ret;

	int i = 0;
	for (auto it = begin; it < end; it++)
	{
		std::pair<int, Iter> pair(i, it);
		pairList.push_back(pair);
		i++;
	}

	std::stable_sort(pairList.begin(), pairList.end(),
		[comp](std::pair<int, Iter> prev, std::pair<int, Iter> next) -> bool
	{return comp(*prev.second, *next.second); }
	);

	for (auto i : pairList)
		ret.push_back(i.first);

	return ret;
}

void fill_diag(std::vector<std::vector<double>>& X) {
    for (size_t i = 0; i < X.size(); ++i) {
        for (size_t j = 0; j < X[i].size(); ++j) {
            if (i == j)
                X[i][j] = INFINITY;
        }
    }
}

std::vector<std::vector<int>> get_knn_indices(const std::vector<std::vector<double>> &X,
        const int k) {

    std::list<point> X_list;
    for (size_t i = 0; i < X.size(); ++i) {
        point p(X[i]);
        X_list.push_back(p);
    }

    std::vector<std::vector<int>> ind_X_embedded;
    for (auto i = X_list.begin(); i != X_list.end(); ++i) {
        auto temp = knn_classify(X_list, *i, k);
        ind_X_embedded.push_back(temp);
    }
    return ind_X_embedded;
}

double compute_rank(const std::vector<std::vector<int>>& ind_X,
		std::vector<std::vector<int>>& ind_X_embedded,
		const int k) {

    const auto n = ind_X.size();

    auto rank = 0;
    for (size_t i = 0; i < n; ++i) {
        std::vector<int> ranks(k, 0);
        for (auto j = 0; j < k; ++j) {
            auto it = std::find(ind_X[i].begin(), ind_X[i].end(), ind_X_embedded[i][j]);
            if (it != ind_X[i].end()) {
                auto idx = std::distance(ind_X[i].begin(), it);
                ranks[j] = idx;
            }
        }
        for (auto& val : ranks)
            val -= k;

        for (const auto& val : ranks)
            if (val > 0)
                rank += val;
    }
	return rank;
}

template <typename T>
void print_matrix(const std::vector<std::vector<T>>& matrix) {
    for (size_t i = 0; i < matrix.size(); ++i) {
        std::cout << "[ ";
        for (size_t j = 0; j < matrix[i].size(); ++j) {
            std::cout << matrix[i][j] << ' ';
        }
        std::cout << "]\n";
    }
}

double trustworthiness_score(const std::vector<std::vector<int>>& X,
        const std::vector<std::vector<double>>& Y, int n, int d, int k) {

    /*
	std::vector<std::vector<double>> tmp_Y = {
    { -9.264103,  29.668066},
    {-18.184130,  11.530393},
    {0.767529,   1.902768},
    {-12.094346,  19.033915},
    {-15.206403, 51.198792},
    {-10.372506,  60.144257},
    {-16.650372,  59.219334},
    {-4.963686,  18.147038},
    {-5.317563,  -8.753447},
    {5.042775,  -9.448483},
    { -8.910046,  52.104244},
    {-2.765458,  40.540005},
    {-18.841143,  32.495621},
    { -5.809219,   8.641576},
    {1.153239, -41.513042},
    {-3.365617, -39.133484},
    {-14.989665,  69.356201},
    {-23.417856,  26.096212},
    { 6.093806, -41.801422},
    {-12.202136,   2.876260},
    { 9.727850, -38.159698},
    {-25.482895,  22.110653},
    {-5.945102, -34.273235},
    {25.804256, -29.029818},
    {36.430893, -10.571532},
    {37.097740, -17.257132},
    {19.587513, -43.493832},
    {24.641304, -15.717302},
    {13.117455,  -5.997260},
    {19.811979, -38.394394},
    {-10.553720, -16.170013},
    {20.737284,  -6.628983},
    {2.863682, -31.781860},
    {7.630404, -23.282579}};
    */

	auto dist_X = pairwise_distances(X);
	fill_diag(dist_X);

	std::vector<std::vector<int>> ind_X;
	for (size_t i = 0; i < dist_X.size(); ++i) {
		auto tmp = argsort(dist_X[i].begin(), dist_X[i].end(), std::less<double>());
		ind_X.push_back(tmp);
	}

    /*
    std::vector<std::vector<int>> ind_X = {{1,3,16,7,13,28,10,4,5,9,12,2,30,17,6,21,24,11,25,19,27,26,15,20
		,18,14,22,8,29,23,32,31,33,0},
		{3,12,7,8,13,11,21,9,17,10,4,28,19,22,26,27,20,0,16,15,14,6,5,2
			,18,24,25,29,30,31,23,32,33,1},
		{21,3,17,30,7,12,19,13,11,18,15,22,14,31,20,23,8,24,4,1,10,26,16,9
			,6,5,29,25,28,27,33,0,32,2},
		{17,21,7,13,11,19,12,9,28,10,8,4,1,26,27,20,22,16,14,30,15,6,5,2
			,18,24,25,31,29,23,0,32,33,3},
		{5,11,16,21,17,12,19,10,26,22,20,18,15,14,9,7,6,28,8,24,25,13,30,31
			,3,27,29,23,1,2,0,32,33,4},
		{4,11,16,21,6,17,12,19,10,26,22,20,18,15,14,9,7,13,8,24,25,28,30,31
			,3,27,29,23,1,2,0,32,33,5},
		{10,11,16,21,5,17,12,4,19,26,22,20,18,15,14,9,7,13,8,24,25,28,30,31
			,3,27,29,23,1,2,0,32,33,6},
		{13,17,12,21,19,11,3,9,28,10,8,4,20,22,26,27,18,16,14,15,6,5,30,24
			,25,1,31,2,29,23,0,32,33,7},
		{15,22,20,18,9,14,28,19,11,13,27,26,21,17,29,30,31,7,12,10,4,23,6,5
			,3,16,24,25,1,32,2,33,0,8},
		{28,15,27,26,22,20,18,14,19,8,11,13,21,17,29,16,7,12,30,10,4,23,24,25
			,31,6,5,3,1,32,2,0,33,9},
		{6,11,16,21,17,12,4,19,26,22,20,18,15,14,9,7,5,28,8,24,25,13,31,30
			,3,27,29,23,1,2,0,32,33,10},
		{21,17,12,4,19,10,16,26,22,20,18,14,15,9,7,6,5,13,28,8,25,24,27,3
			,31,29,30,23,1,2,32,0,33,11},
		{11,21,7,17,4,19,10,13,16,26,22,20,18,14,15,9,6,5,8,24,25,28,29,3
			,27,31,30,23,1,2,32,0,33,12},
		{7,19,21,9,12,17,28,8,11,15,27,26,22,20,18,30,14,3,10,4,31,6,5,29
			,16,23,24,25,1,2,32,0,33,13},
		{15,22,20,18,26,29,9,30,8,28,23,19,11,12,27,17,21,31,16,4,10,24,25,13
			,5,7,6,3,2,1,32,33,0,14},
		{22,20,18,14,30,26,9,29,28,23,8,19,11,27,21,17,16,12,31,13,10,4,24,25
			,7,6,5,3,2,1,32,33,0,15},
		{4,11,10,15,22,21,20,18,17,26,14,12,6,5,9,24,19,28,25,30,7,27,29,13
			,8,23,31,3,1,2,32,0,33,16},
		{21,19,11,7,12,4,10,13,16,26,22,20,18,14,15,6,5,3,9,30,8,24,25,28
			,29,31,27,23,2,1,32,0,33,17},
		{15,22,20,14,26,29,9,30,8,28,23,19,11,12,27,31,17,21,16,4,10,24,25,13
			,7,5,6,3,2,1,32,33,0,18},
		{21,17,13,11,15,26,22,20,18,14,12,30,9,7,8,28,10,4,27,3,5,6,29,31
			,16,23,24,25,2,1,32,0,33,19},
		{15,22,18,14,26,29,9,30,8,28,23,19,11,12,27,31,17,21,16,4,10,24,25,13
			,7,5,6,3,2,1,32,33,0,20},
		{17,19,11,7,12,4,10,13,16,26,22,20,18,14,15,6,5,3,9,30,8,24,25,28
			,29,31,27,23,2,1,32,0,33,21},
		{15,20,18,14,26,29,9,30,8,28,23,19,11,12,27,31,17,21,16,4,10,24,25,13
			,7,5,6,3,2,1,32,33,0,22},
		{15,26,22,20,18,14,24,31,29,30,9,11,28,8,19,16,12,27,17,21,25,4,10,13
			,7,6,5,3,2,32,1,33,0,23},
		{28,25,23,11,16,26,22,21,20,18,17,14,15,9,12,10,4,19,6,27,31,5,30,29
			,7,8,13,3,2,1,32,33,0,24},
		{27,28,24,11,16,26,22,21,20,18,17,29,14,15,12,9,10,4,19,31,6,5,7,30
			,13,23,8,3,32,1,2,33,0,25},
		{15,22,20,18,9,14,28,23,19,11,27,21,17,29,16,12,30,10,8,4,24,25,13,7
			,6,5,31,3,32,1,2,33,0,26},
		{9,28,25,15,14,26,22,20,29,18,13,8,19,11,21,31,17,16,12,7,30,10,23,24
			,4,6,5,3,32,1,2,0,33,27},
		{9,15,27,26,22,20,18,14,25,24,8,19,11,13,21,17,16,29,12,7,30,10,23,4
			,6,5,3,31,32,1,2,0,33,28},
		{15,22,20,18,14,27,26,9,30,19,28,11,25,23,8,21,17,16,31,12,4,13,24,10
			,5,6,7,3,2,32,1,33,0,29},
		{15,14,18,22,20,19,9,29,17,26,21,23,11,13,28,8,27,16,12,7,31,10,4,24
			,25,6,5,3,2,32,1,0,33,30},
		{15,22,20,18,14,23,19,8,11,27,26,21,17,29,30,12,9,10,4,24,25,28,13,7
			,6,5,16,3,2,1,32,33,0,31},
		{33,28,26,27,9,25,8,30,18,22,14,15,20,29,24,23,11,13,19,21,16,12,7,17
			,10,4,6,5,3,31,1,2,0,32},
		{32,29,2,25,24,23,15,30,14,20,18,26,22,11,28,8,21,27,16,12,9,17,31,19
			,10,4,1,7,6,5,3,13,0,33}};
    */

    auto ind_X_embedded = get_knn_indices(Y, k);
    /*
    std::vector<std::vector<int>> ind_X_embedded = {{ 3, 7, 12, 11,  1},
		{ 3,  7, 13, 0, 19},
		{ 8,  9, 13, 7,  1},
		{ 7,  1,  0, 13, 12},
		{ 6, 10,  5, 11, 12},
		{ 6, 10,  4, 16, 11},
		{ 5,  4, 10, 16, 11},
		{ 3, 13,  0,  1,  2},
		{ 9,  2, 19, 13, 30},
		{ 8,  2, 28, 13, 19},
		{ 4,  5,  6, 11, 16},
		{10,  0,  4, 12,  5},
		{17, 21,  0,  3, 11},
		{19,  7,  2,  3,  1},
		{15, 18, 20, 22, 32},
		{14, 22, 18, 20, 32},
		{ 6,  5, 10,  4, 11},
		{21, 12,  3,  1,  0},
		{20, 14, 15, 22, 26},
		{13,  8,  7,  1,  2},
		{18, 14, 26, 29, 15},
		{17, 12,  3, 19,  1},
		{15, 14, 32, 18, 20},
		{29, 27, 26, 25, 20},
		{25, 27, 31, 23, 28},
		{24, 27, 23, 31, 28},
		{29, 20, 18, 23, 32},
		{31, 25, 24, 23, 28},
		{31, 27, 33,  9, 24},
		{26, 23, 20, 18, 32},
		{33, 22, 32, 19,  8},
		{28, 27, 24, 25, 33},
		{33, 22, 20, 18, 29},
		{32, 28, 27, 30, 29}};
    */
    double t = compute_rank(ind_X, ind_X_embedded, k);
    std::cout << t << std::endl;

    t = 1.0 - t * (2.0 / (n * k *
                (2.0 * n - 3.0 * k - 1.0)));
    std::cout << t << std::endl;
    return t;
}
